Texture2D shaderTexture : register(t0);
Texture2D wallTexture : register(t1);
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
};

float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
	float4 floorColor;
	float4 wallColor;
	float slope;
	
	float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;

	//sample texture color at texture coordinate
	floorColor = shaderTexture.Sample(SampleType, input.tex);

	//sample for wall
	wallColor = wallTexture.Sample(SampleType, input.tex);

	// Calculate the slope of this point.
    slope = 1.0f - input.normal.y;

	if(slope < 0.7)
		textureColor = floorColor;
	else
		textureColor = wallColor;

    // Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

    if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);
    }

    // Saturate the final light color.
    color = saturate(color);

	//multiply by texture pixel
	color = color * textureColor;

    return color;
}