Texture2D shaderTexture : register(t0);
Texture2D wallTexture : register(t1);
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
};

float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
	float4 floorColor;
	float4 wallColor;
	float slope;
	
	float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;

	//sample texture color at texture coordinate
	floorColor = shaderTexture.Sample(SampleType, input.tex);

	//sample for wall
	wallColor = wallTexture.Sample(SampleType, input.tex);

	//calc slope
    slope = 1.0f - input.normal.y;

	//set texture based on slope (wall or floor)
	if(slope < 0.7)
		textureColor = floorColor;
	else
		textureColor = wallColor;

    //default color equals ambient light color
    color = ambientColor;

    //invert light direction (for calculations)
    lightDir = -lightDirection;

    //calc amount of light
    lightIntensity = saturate(dot(input.normal, lightDir));

    if(lightIntensity > 0.0f)
    {
        //calc final diffuse color
        color += (diffuseColor * lightIntensity);
    }

    //saturate final light color
    color = saturate(color);

	//combine texture color with light color
	color = color * textureColor;

    return color;
}